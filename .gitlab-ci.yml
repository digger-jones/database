image: registry.gitlab.antimatter-studios.com/antimatter-studios/kubernetes-gitlab-deployer/image:531

services:
  - docker:dind

before_script:
  - docker info

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  NAMESPACE: mail-server
  NAME: database
  MIGRATIONS: ${CI_REGISTRY_IMAGE}/migrations
  REPLICAS: 1

stages:
  - build
  - deploy

.login_docker: &login_docker
  echo ${CI_JOB_TOKEN} && echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token --password-stdin ${CI_REGISTRY}

build:
  stage: build
  script:
    - *login_docker
    - docker build --pull -t ${CI_REGISTRY_IMAGE}/migrations:${CI_PIPELINE_ID} -f $PWD/Dockerfile $PWD
    - docker push ${CI_REGISTRY_IMAGE}/migrations:${CI_PIPELINE_ID}
    - docker tag ${CI_REGISTRY_IMAGE}/migrations:${CI_PIPELINE_ID} ${CI_REGISTRY_IMAGE}/migrations:latest
    - docker push ${CI_REGISTRY_IMAGE}/migrations:latest

deploy:
  stage: deploy
  dependencies:
    - build
  script:
    - echo ${CI_KUBECONFIG} | base64 -d > $PWD/kubeconfig
    - export KUBECONFIG=$PWD/kubeconfig
    - kubectl get pods --all-namespaces
    - echo "Deleting the migration job so it can execute a fresh run each deployment if necessary"
    - kubectl delete job migrations || true
    - kubectl scale --replicas=0 statefulset/${NAME} || true
    - kubectl get statefulset
    - helm template
      --set name=${NAME}
      --set namespace=${NAMESPACE}
      --set database_size=$(kubectl get configmap general -o=jsonpath="{.data.DATABASE_SIZE}")
      --set port=$(kubectl get configmap database-common -o=jsonpath="{.data.DATABASE_PORT}")
      --set repository=${CI_REGISTRY_IMAGE}/migrations:latest
      --set registry=${CI_REGISTRY}
      --set username=${CI_DEPLOY_USERNAME}
      --set password=${CI_DEPLOY_PASSWORD}
      $PWD/kubernetes | kubectl apply -f -
    - kubectl scale --replicas=${REPLICAS} statefulset/${NAME}
    - kubectl get statefulset